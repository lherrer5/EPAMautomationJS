{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-12T22:09:30.023Z",
    "end": "2023-10-12T22:09:30.048Z",
    "duration": 25,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1f1d336-d529-4978-a2dd-5542e4a17167",
      "title": "",
      "fullFile": "C:\\Users\\lina_\\OneDrive\\Documentos\\EPAM\\AutomationJSproject\\test\\unitT\\isNumberEven.spec.js",
      "file": "\\test\\unitT\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
          "title": "isNumberEven positive test",
          "fullFile": "C:\\Users\\lina_\\OneDrive\\Documentos\\EPAM\\AutomationJSproject\\test\\unitT\\isNumberEven.spec.js",
          "file": "\\test\\unitT\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "c8611668-9568-4424-a3ec-266610fbd66e",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "7bee386e-254a-479a-8833-87c3173ed8d3",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8ae4fd60-e502-4da8-8c1b-0bcc7e06e9cd",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven positive test should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "79ae98a8-c5be-4583-878e-3015ea6a72f3",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "89b7a97d-9fb7-4115-bb6d-69b6d2061815",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([2, 4, 6]);\nexpect(validationResults).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "2bf37583-0d30-4fc2-a283-268ccbf160e3",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No even numbers inside array",
              "fullTitle": "isNumberEven positive test No even numbers inside array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([7, 9]);\nexpect(validationResults).to.deep.equal([]);",
              "err": {},
              "uuid": "e4c23408-816e-4919-9090-ff3cd1d462bc",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array is not full of numbers",
              "fullTitle": "isNumberEven positive test should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [5, '2', 11, 22];\nexpect(() => {\n  validator.getEvenNumbersFromArray([arrayOfNumbers]);\n}).to.throw('[5,2,11,22] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "8201c708-76a1-4ff5-9645-d57b5ab16249",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with elements that are only numbers",
              "fullTitle": "isNumberEven positive test should return true when provided with elements that are only numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([12, 6, 8, 4]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "f3f6fb47-edf5-4315-8321-83cbe3c7f8c3",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with at least one element different from a number",
              "fullTitle": "isNumberEven positive test should return false when provided with at least one element different from a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([12, 6, 8, '4']);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "65d6d7f9-bc09-470c-b0ce-8082dbf0f5e0",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when provided element is not an array",
              "fullTitle": "isNumberEven positive test should return an error when provided element is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers(4);\n}).to.throw('[4] is not an array');",
              "err": {},
              "uuid": "90b1a9a4-e3fa-4fa3-8385-e5b827a00d56",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided element is an integer",
              "fullTitle": "isNumberEven positive test should return true when provided element is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(200);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "f1b20fb2-5d8e-4468-bd5e-6d0f950a8b3f",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided element is an integer",
              "fullTitle": "isNumberEven positive test should return false when provided element is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(8.5);\n/* eslint-disable no-unused-expressions */\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "c33d762a-83b2-48d5-b4a1-2333278d99af",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when provided element is not a number",
              "fullTitle": "isNumberEven positive test should return an error when provided element is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('lina');\n}).to.throw('[lina] is not a number');",
              "err": {},
              "uuid": "7b6cff14-fb3c-46e5-9ede-a9de32db888a",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when provided element is empty",
              "fullTitle": "isNumberEven positive test should return an error when provided element is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger();\n}).to.throw(Error);",
              "err": {},
              "uuid": "44d4c08b-9d7d-46aa-8621-502d3a2b4625",
              "parentUUID": "9f14eb1d-ec93-4e74-a165-4a484ceb075e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ae4fd60-e502-4da8-8c1b-0bcc7e06e9cd",
            "79ae98a8-c5be-4583-878e-3015ea6a72f3",
            "89b7a97d-9fb7-4115-bb6d-69b6d2061815",
            "2bf37583-0d30-4fc2-a283-268ccbf160e3",
            "e4c23408-816e-4919-9090-ff3cd1d462bc",
            "8201c708-76a1-4ff5-9645-d57b5ab16249",
            "f3f6fb47-edf5-4315-8321-83cbe3c7f8c3",
            "65d6d7f9-bc09-470c-b0ce-8082dbf0f5e0",
            "90b1a9a4-e3fa-4fa3-8385-e5b827a00d56",
            "f1b20fb2-5d8e-4468-bd5e-6d0f950a8b3f",
            "c33d762a-83b2-48d5-b4a1-2333278d99af",
            "7b6cff14-fb3c-46e5-9ede-a9de32db888a",
            "44d4c08b-9d7d-46aa-8621-502d3a2b4625"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}