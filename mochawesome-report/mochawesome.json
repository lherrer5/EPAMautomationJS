{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-12T22:10:33.137Z",
    "end": "2023-10-12T22:10:33.163Z",
    "duration": 26,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "659edec0-7b2d-461d-84f1-46a095ae0a13",
      "title": "",
      "fullFile": "C:\\Users\\lina_\\OneDrive\\Documentos\\EPAM\\AutomationJSproject\\test\\unitT\\isNumberEven.spec.js",
      "file": "\\test\\unitT\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
          "title": "isNumberEven positive test",
          "fullFile": "C:\\Users\\lina_\\OneDrive\\Documentos\\EPAM\\AutomationJSproject\\test\\unitT\\isNumberEven.spec.js",
          "file": "\\test\\unitT\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "63feecba-e611-4a89-8f24-cbbfdc67e171",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "fccc07d9-87fd-402d-8e4b-28487e5c5f6b",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "e3f23803-e57f-465a-b959-118f4cb0fb1a",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven positive test should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "624f67aa-a6d2-47a6-af48-361e876de04a",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "26a6b206-932b-40bb-bab1-59f785e72b2c",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([2, 4, 6]);\nexpect(validationResults).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "ec17c11b-4bf0-4486-9db9-d0f71ddc2d66",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No even numbers inside array",
              "fullTitle": "isNumberEven positive test No even numbers inside array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([7, 9]);\nexpect(validationResults).to.deep.equal([]);",
              "err": {},
              "uuid": "2ad3da64-e774-4c5d-94d1-e744a605eaf3",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array is not full of numbers",
              "fullTitle": "isNumberEven positive test should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [5, '2', 11, 22];\nexpect(() => {\n  validator.getEvenNumbersFromArray([arrayOfNumbers]);\n}).to.throw('[5,2,11,22] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "406f59fd-09e8-49b7-aac7-05754424c082",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with elements that are only numbers",
              "fullTitle": "isNumberEven positive test should return true when provided with elements that are only numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([12, 6, 8, 4]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "9e35734b-94b4-4df3-bd73-edf2677e9539",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with at least one element different from a number",
              "fullTitle": "isNumberEven positive test should return false when provided with at least one element different from a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([12, 6, 8, '4']);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "da3a7f08-b526-4cb2-952b-c8f680d5625b",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when provided element is not an array",
              "fullTitle": "isNumberEven positive test should return an error when provided element is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers(4);\n}).to.throw('[4] is not an array');",
              "err": {},
              "uuid": "4988a21c-d630-4278-be52-c7636eabcbf4",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided element is an integer",
              "fullTitle": "isNumberEven positive test should return true when provided element is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(200);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "5692834c-dbb5-478d-802a-74e93ecef0e8",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided element is an integer",
              "fullTitle": "isNumberEven positive test should return false when provided element is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(8.5);\n/* eslint-disable no-unused-expressions */\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "f22f00f1-d61d-48c2-8d05-fdd823ac8954",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when provided element is not a number",
              "fullTitle": "isNumberEven positive test should return an error when provided element is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('lina');\n}).to.throw('[lina] is not a number');",
              "err": {},
              "uuid": "10b3da03-8f83-4085-9aac-ef8e7a354361",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when provided element is empty",
              "fullTitle": "isNumberEven positive test should return an error when provided element is empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger();\n}).to.throw(Error);",
              "err": {},
              "uuid": "bbe9de6b-a160-43e2-9322-5a34c7bc5a40",
              "parentUUID": "bedd9d8e-9b41-44e7-b682-c415ece2a95c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3f23803-e57f-465a-b959-118f4cb0fb1a",
            "624f67aa-a6d2-47a6-af48-361e876de04a",
            "26a6b206-932b-40bb-bab1-59f785e72b2c",
            "ec17c11b-4bf0-4486-9db9-d0f71ddc2d66",
            "2ad3da64-e774-4c5d-94d1-e744a605eaf3",
            "406f59fd-09e8-49b7-aac7-05754424c082",
            "9e35734b-94b4-4df3-bd73-edf2677e9539",
            "da3a7f08-b526-4cb2-952b-c8f680d5625b",
            "4988a21c-d630-4278-be52-c7636eabcbf4",
            "5692834c-dbb5-478d-802a-74e93ecef0e8",
            "f22f00f1-d61d-48c2-8d05-fdd823ac8954",
            "10b3da03-8f83-4085-9aac-ef8e7a354361",
            "bbe9de6b-a160-43e2-9322-5a34c7bc5a40"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}