{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-12T21:36:42.555Z",
    "end": "2023-10-12T21:36:42.579Z",
    "duration": 24,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "24c17b0b-2108-4792-9f00-67b1687e24bc",
      "title": "",
      "fullFile": "C:\\Users\\lina_\\OneDrive\\Documentos\\EPAM\\AutomationJSproject\\test\\unitT\\isNumberEven.spec.js",
      "file": "\\test\\unitT\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
          "title": "isNumberEven positive test",
          "fullFile": "C:\\Users\\lina_\\OneDrive\\Documentos\\EPAM\\AutomationJSproject\\test\\unitT\\isNumberEven.spec.js",
          "file": "\\test\\unitT\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "6bbb1e6a-ab1d-4d5a-a583-8f2110a287a1",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "ee0d64cc-8fac-4ccb-9335-cf2a0b9c3570",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "40bdb4ad-6a66-4af6-8e19-d86c42d6cd66",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven positive test should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "b34567f1-2297-459d-80b8-b6d0efe074fd",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "36760528-71ee-4e0a-ac56-ee1e7670c777",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([2, 4, 6]);\nexpect(validationResults).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "577acbfc-21f1-452f-a54e-32f67977ab1b",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No even numbers inside array",
              "fullTitle": "isNumberEven positive test No even numbers inside array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([7, 9]);\nexpect(validationResults).to.deep.equal([]);",
              "err": {},
              "uuid": "c526f9b1-f53d-4504-af14-ccf7ebec19b0",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array is not full of numbers",
              "fullTitle": "isNumberEven positive test should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [5, '2', 11, 22];\nexpect(() => {\n  validator.getEvenNumbersFromArray([arrayOfNumbers]);\n}).to.throw('[5,2,11,22] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "6cf7a927-bb4a-4b61-a528-210a85234bee",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with elements that are only numbers",
              "fullTitle": "isNumberEven positive test should return true when provided with elements that are only numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([12, 6, 8, 4]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8cd4927d-5c89-406b-9b20-d1f83c35600e",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with at least one element different from a number",
              "fullTitle": "isNumberEven positive test should return false when provided with at least one element different from a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([12, 6, 8, '4']);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "28cacbd0-e698-4a66-a1c9-e1c063323d1f",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided element is not an array",
              "fullTitle": "isNumberEven positive test should return false when provided element is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\nvalidator.isAllNumbers(4);\n}).to.throw('[4] is not an array');",
              "err": {},
              "uuid": "eedb8fd9-404d-4af1-badb-a869d5b73ecc",
              "parentUUID": "33b4bc18-1d69-4b45-8d23-f5f7a11fe5f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40bdb4ad-6a66-4af6-8e19-d86c42d6cd66",
            "b34567f1-2297-459d-80b8-b6d0efe074fd",
            "36760528-71ee-4e0a-ac56-ee1e7670c777",
            "577acbfc-21f1-452f-a54e-32f67977ab1b",
            "c526f9b1-f53d-4504-af14-ccf7ebec19b0",
            "6cf7a927-bb4a-4b61-a528-210a85234bee",
            "8cd4927d-5c89-406b-9b20-d1f83c35600e",
            "28cacbd0-e698-4a66-a1c9-e1c063323d1f",
            "eedb8fd9-404d-4af1-badb-a869d5b73ecc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}